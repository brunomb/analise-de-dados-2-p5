Exemplo em R para classificação de aprovação de crédito com Árvores de Decisão, Florestas e Sensibilidade a Custo de Erro

Bibliotecas Requeridas

library("gmodels")
library("C50")

Dados disponíveis em: http://www.dsc.ufcg.edu.br/~lbmarinho/ad2_2014_2/credit.csv

#######################################################
Anáise dos Dados                                      #
#######################################################

> credit <- read.csv("credit.csv")
> str(credit) (mostra a estrutura de um objeto)
> table(credit$checking_balance) (quantidade de instancias por valor da variável checking_balance)
> table(credit$savings_balance)
> summary(credit$months_loan_duration)
> summary(credit$amount)
> table(credit$default) (Porcentagem de clientes que deram calote vs. Não deram calote)

######################################################
Embaralhando os dados                                #
######################################################

> set.seed(12345) (Randomizar escolha de instâncias para o treino e teste)
> credit_rand <- credit[order(runif(1000)), ]
> summary(credit$amount) (checando se a randomização não inseriu sujeira nos dados)
> summary(credit_rand$amount) (checando se a randomização não inseriu sujeira nos dados)

#####################################################
Criando Partição Treino/Teste                       #
#####################################################

> credit_train <- credit_rand[1:900, ]
> credit_test <- credit_rand[901:1000, ]
> prop.table(table(credit_train$default))
> prop.table(table(credit_test$default))

###################################################
Treinando a árvore                                #  
###################################################

> credit_model <- C5.0(credit_train[-17], credit_train$default)
> credit_model
> summary(credit_model)

##################################################
Aplicando a árvore nos dados de teste            #
##################################################

> credit_pred <- predict(credit_model, credit_test)
> library(gmodels)
> CrossTable(credit_test$default, credit_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))

#################################################
Treinando uma Floresta com 10 árvores           #
#################################################

> credit_boost10 <- C5.0(credit_train[-17], credit_train$default,trials = 10)
> credit_boost10
> summary(credit_boost10)
> credit_boost10_pred <- predict(credit_boost10, credit_test)
> CrossTable(credit_test$default, credit_boost_pred10, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))

################################################
Usando custos de erro                          #  
################################################

> error_cost <- matrix(c(0, 1, 4, 0), nrow = 2) (1=no, 2=yes. Linhas valores preditos e colunas valores reais)
> credit_cost <- C5.0(credit_train[-17], credit_train$default,costs = error_cost)
> credit_cost_pred <- predict(credit_cost, credit_test)
> CrossTable(credit_test$default, credit_cost_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))










